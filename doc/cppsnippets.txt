*cppsnippets.txt*     A C++ snippets plugin for algorithms and useful tricks 
                      for Algorithms practicum classes.

==============================================================================
CONTENTS                                  *cppsnippets* *cppsnippets-contents*

    1.Main functionality
        1.1.Function generating........................... |GenFunc|
        1.2.Input generating.............................. |Input|
    2.Basic templates
        2.1.Autoimport.................................... |Import|
        2.2.For loop...................................... |For|
        2.3.Foreach loop.................................. |Fore|
        2.4.Initial exercise setup........................ |Init|
    2. Algorithms snippets
        3.1.Binary search................................. |Binary|
        3.2.BFS........................................... |Bfs|
        3.3.Dijkstra's algorithm.......................... |Dijkstra|
        3.4.Union find.................................... |UnionFind|
        3.5.Topological sort (Kahn's algorithm)........... |TopoSort|

==============================================================================
1. Main functionality

------------------------------------------------------------------------------
1.1 Function generating

:GenFunc                                                            *:GenFunc*

default key binding: g!

    When function declaration foo(var1, var2, ..., varn), but foo is not 
    defined in the file, then calling :GenFunc when cursor is on foo (the name
    of the function), a function foo is defined in the file with right types
    of parameters.

>
        int main() {
        int var1 = 5;
        pair<int, int> var2 = {2, 3};
        vector<int> var3;
        
        foo(var1, var2, var3);
        }
        
        --->
        
        void foo(int var1, pair<int, int> var2, vector<int> var3) {
        
        }
        
        int main() {
        int var1 = 5;
        pair<int, int> var2 = {2, 3};
        vector<int> var3;
        
        foo(var1, var2, var3);
        }
<

------------------------------------------------------------------------------
1.2 Input generating

:Input                                                                *:Input*

default key binding: gI

    When variables are defined on a single row like for example:
>
        unsigned int m = 10, n = 5, p, q = 15; 
<
    then :Input command inserts scanf statement with all variables on the row:
>
        unsigned int m = 10, n = 5, p, q = 15; 

        unsigned long long m = 10, n = 5, p, q = 15;
        scanf("%llu %llu %llu %llu %llu", %m, %n, %p, %q);
<

    You can select many rows in visual mode and use the same command to insert 
    individual scanf statements for each of the selected rows. Default key 
    binding is gI, but it can be changed through a variable called
    g:input_mapping. YOU CAN'T USE THIS COMMAND IN SITUATIONS LIKE:
>
        int p; unsigned q;
<
    YOU CAN USE IT ONLY WHEN VARIABLES OF SAME TYPE ARE DEFINED!!!

==============================================================================
2. Basic snippets

------------------------------------------------------------------------------
2.1 Autoimport                                                      

:Import [<lib1>] [<lib2>] ... [<libn>]                               *Import*
   Includes libraries <lib1> ... <libn> in file. 

------------------------------------------------------------------------------
2.2 For loop

:For <lower_bound> <upper_bound> [<options>] [<var_name>] [<step>]      *For*

    If there are no arguments passed, a simple:
>
        for(initialization; condition; step) {
        
        }
<
    is inserted.
    If 'r' is passed as an option, the for loop iterates backwards.

------------------------------------------------------------------------------
2.3 Foreach loop

:Fore <obj_name> [<options: p | m>]                                    *Fore*
    
    p: stands for 'print' - adds print statement
    m: stands for 'modify' - adds & symbol next to variable name

>
        :Fore arr obj pm

        for(auto& obj : arr) {
            cout << obj << " ";
        }
<

------------------------------------------------------------------------------
2.4 Initial exercise setup

:Init [<lib1>] ... [<libn>]                                            *Init*
   Inserts main function and libraries written as arguements as well as
   default ones. 

>
        #include <iostream>
        #include <vector>
        #include <algorithm>
        #include <{lib1}>
        ...
        #include <{libn}>
        using namespace std;
        
        int main() {
        
        }
< 

==============================================================================
3. Algorithms

------------------------------------------------------------------------------
3.1 Binary search

:Binary <lowerBound> <upperBound> [<leftVarName: default is 'left'>]
    [<rightVarName: default is 'right'>]? [<functionName: default is OK>]
                                                                     *Binary*
    Inserts binary search snippet where the cursor is positioned.

------------------------------------------------------------------------------
3.2 BFS

:Bfs <graph name: with type vector<vector<int>>(adjacency list)>
    <start vertex: integer from 0 to {graph name}.size() - 1>           *Bfs*
    
------------------------------------------------------------------------------
3.3 Dijkstra's algorithm

:Dijkstra <graph name: with type vector<vector<pair<int, int>>>    *Dijkstra*
    (adjacency list)>
    <start vertex: integer from 0 to {graph name}.size() - 1>

------------------------------------------------------------------------------
3.4 Union find

:UnionFind                                                        *UnionFind*
    Inserts find and union functions above main function.

------------------------------------------------------------------------------
3.5 Topological sort
    
:TopoSort <graph name: vector<vector<int>> (adjacency list)>       *TopoSort*
    <start vertex: integer from 0 to {graph name}.size() - 1>
    Inserts Kahn's algorithm for topological sorting.

vim:ft=help
